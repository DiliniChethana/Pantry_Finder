from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

# Initialize SQLAlchemy instance. This will be initialized with the app in main.py
db = SQLAlchemy()

# ====================================================================
# 1. User Model (Matches Pages 2, 3, 7: Login, Signup, Profile)
# ====================================================================
class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False) # User Name
    email = db.Column(db.String(120), unique=True, nullable=False)   # Email Address
    phone_number = db.Column(db.String(20))                         # Phone No
    
    # Profile Information (Page 7)
    first_name = db.Column(db.String(80))
    last_name = db.Column(db.String(80))
    
    password_hash = db.Column(db.String(256), nullable=False)
    
    # Relationships
    pantry_items = db.relationship('PantryItem', backref='owner', lazy='dynamic')
    saved_recipes = db.relationship('SavedRecipe', backref='user', lazy='dynamic')

    def set_password(self, password):
        """Hashes the password for secure storage."""
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """Checks the stored hash against the provided password."""
        return check_password_hash(self.password_hash, password)

# ====================================================================
# 2. PantryItem Model (Matches Page 4: Add New Ingredients)
# ====================================================================
class PantryItem(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    
    name = db.Column(db.String(100), nullable=False)   # Ingredient Name
    quantity = db.Column(db.Float, nullable=False)     # Quantity
    units = db.Column(db.String(20), nullable=False)   # Units
    
    expiry_date = db.Column(db.Date)                   # Used by Date / Expired Date
    
    added_date = db.Column(db.DateTime, default=datetime.utcnow)

    def to_dict(self):
        """A helper function to easily serialize the item for JSON responses."""
        return {
            'id': self.id,
            'name': self.name,
            'quantity': self.quantity,
            'units': self.units,
            'expiry_date': self.expiry_date.isoformat() if self.expiry_date else None
        }

# ====================================================================
# 3. SavedRecipe Model (Matches Page 6: Saved Recipes)
# ====================================================================
class SavedRecipe(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    
    name = db.Column(db.String(150), nullable=False) # Recipe name
    date_saved = db.Column(db.DateTime, default=datetime.utcnow) # Saved date
    
    # Stores the full recipe JSON generated by the AI model
    recipe_json = db.Column(db.JSON)

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'date_saved': self.date_saved.strftime("%b %d, %Y"),
            'recipe_data': self.recipe_json
        }
